/*----- PROTECTED REGION ID(Dhyana.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        Dhyana.cpp
//
// description : C++ source for the Dhyana class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Dhyana are implemented in this file.
//
// project :     Device specific for Dhyana detector
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <helpers/PogoHelper.h>
#include <Dhyana.h>
#include <DhyanaClass.h>

#include "AttrViewDhyana95.h"

/*----- PROTECTED REGION END -----*/	//	Dhyana.cpp

/**
 *  Dhyana class description:
 *    Interface the camera Dhyana using  the TUCAM Library
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  dev_state
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace Dhyana_ns
{
/*----- PROTECTED REGION ID(Dhyana::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	Dhyana::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : Dhyana::Dhyana()
 *	Description : Constructors for a Tango device
 *                implementing the classDhyana
 */
//--------------------------------------------------------
Dhyana::Dhyana(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Dhyana::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::constructor_1
}
//--------------------------------------------------------
Dhyana::Dhyana(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(Dhyana::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::constructor_2
}
//--------------------------------------------------------
Dhyana::Dhyana(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(Dhyana::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : Dhyana::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Dhyana::delete_device()
{
	DEBUG_STREAM << "Dhyana::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(Dhyana::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	/*DELETE_DEVSTRING_ATTRIBUTE(attr_tucamVersion_read);
	DELETE_DEVSTRING_ATTRIBUTE(attr_globalGain_read);	
	DELETE_SCALAR_ATTRIBUTE(attr_temperatureTarget_read);
	DELETE_SCALAR_ATTRIBUTE(attr_temperature_read);
	DELETE_SCALAR_ATTRIBUTE(attr_fanSpeed_read);
	DELETE_SCALAR_ATTRIBUTE(attr_fps_read);

	DELETE_SCALAR_ATTRIBUTE(attr_channel1_read);
	DELETE_SCALAR_ATTRIBUTE(attr_channel2_read);
	DELETE_SCALAR_ATTRIBUTE(attr_channel3_read);
	DELETE_SCALAR_ATTRIBUTE(attr_width1_read);
	DELETE_SCALAR_ATTRIBUTE(attr_width2_read);
	DELETE_SCALAR_ATTRIBUTE(attr_width3_read);
	DELETE_SCALAR_ATTRIBUTE(attr_delay1_read);
	DELETE_SCALAR_ATTRIBUTE(attr_delay2_read);
	DELETE_SCALAR_ATTRIBUTE(attr_delay3_read);
	DELETE_SCALAR_ATTRIBUTE(attr_edge1_read);
	DELETE_SCALAR_ATTRIBUTE(attr_edge2_read);
	DELETE_SCALAR_ATTRIBUTE(attr_edge3_read);*/
	//	Delete device allocated objects

	INFO_STREAM << "Remove the inner-appender." << endl;
    yat4tango::InnerAppender::release(this);

	m_attr_view.reset();

	//!!!! ONLY LimaDetector device can do this !!!!
	//if(m_ct!=0)
	//{
	//    ControlFactory::instance().reset("Dhyana");
	//    m_ct = 0;
	//}

	/*----- PROTECTED REGION END -----*/	//	Dhyana::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : Dhyana::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void Dhyana::init_device()
{
	DEBUG_STREAM << "Dhyana::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(Dhyana::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call

	// Define the labels of the DevEnum attributes
	/*CREATE_SCALAR_ATTRIBUTE(attr_channel1_read, (channel1Enum)TriggeroutMode::kEXPOSURESTART);
	CREATE_SCALAR_ATTRIBUTE(attr_channel2_read,(channel2Enum)TriggeroutMode::kEXPOSURESTART);
	CREATE_SCALAR_ATTRIBUTE(attr_channel3_read, (channel3Enum)TriggeroutMode::kEXPOSURESTART);


	CREATE_SCALAR_ATTRIBUTE(attr_width1_read, 5.0);
	CREATE_SCALAR_ATTRIBUTE(attr_width2_read, 5.0);
	CREATE_SCALAR_ATTRIBUTE(attr_width3_read, 5.0);
	CREATE_SCALAR_ATTRIBUTE(attr_delay1_read, 0.0);
	CREATE_SCALAR_ATTRIBUTE(attr_delay2_read, 0.0);
	CREATE_SCALAR_ATTRIBUTE(attr_delay3_read, 0.0);

	// Define the labels of the DevEnum attributes
	CREATE_SCALAR_ATTRIBUTE(attr_edge1_read, (edge1Enum)EdgeMode::kRISING);
	CREATE_SCALAR_ATTRIBUTE(attr_edge2_read, (edge2Enum)EdgeMode::kRISING);
	CREATE_SCALAR_ATTRIBUTE(attr_edge3_read, (edge3Enum)EdgeMode::kRISING);

	//	Initialize device

	CREATE_DEVSTRING_ATTRIBUTE(attr_tucamVersion_read, MAX_ATTRIBUTE_STRING_LENGTH);
	CREATE_DEVSTRING_ATTRIBUTE(attr_globalGain_read, MAX_ATTRIBUTE_STRING_LENGTH);
	CREATE_SCALAR_ATTRIBUTE(attr_temperatureTarget_read, 0.0);
	CREATE_SCALAR_ATTRIBUTE(attr_temperature_read, 0.0);
	CREATE_SCALAR_ATTRIBUTE(attr_fanSpeed_read);
	CREATE_SCALAR_ATTRIBUTE(attr_fps_read);*/
	

	/*----- PROTECTED REGION END -----*/	//	Dhyana::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(Dhyana::init_device) ENABLED START -----*/

	/*Tango::Attribute &triggerout1 = get_device_attr()->get_attr_by_name("channel1");
	Tango::MultiAttrProp<Tango::DevEnum> multi_prop_triggerout1;
	triggerout1.get_properties(multi_prop_triggerout1);

	multi_prop_triggerout1.enum_labels = {"ExposureStart", "Readout", "Global"};
	triggerout1.set_properties(multi_prop_triggerout1);


	Tango::Attribute &triggerout2 = get_device_attr()->get_attr_by_name("channel2");
	Tango::MultiAttrProp<Tango::DevEnum> multi_prop_triggerout2;
	triggerout2.get_properties(multi_prop_triggerout2);

	multi_prop_triggerout2.enum_labels = {"ExposureStart", "Readout", "Global"};
	triggerout2.set_properties(multi_prop_triggerout2);

	Tango::Attribute &triggerout3 = get_device_attr()->get_attr_by_name("channel3");
	Tango::MultiAttrProp<Tango::DevEnum> multi_prop_triggerout3;
	triggerout3.get_properties(multi_prop_triggerout3);

	multi_prop_triggerout3.enum_labels = {"ExposureStart", "Readout", "Global"};
	triggerout3.set_properties(multi_prop_triggerout3);


	Tango::Attribute &edgeout1 = get_device_attr()->get_attr_by_name("edge1");
	Tango::MultiAttrProp<Tango::DevEnum> multi_prop_edgeout1;
	edgeout1.get_properties(multi_prop_edgeout1);

	multi_prop_edgeout1.enum_labels = {"Rising", "Failing"};
	edgeout1.set_properties(multi_prop_edgeout1);


    Tango::Attribute &edgeout2 = get_device_attr()->get_attr_by_name("edge2");
	Tango::MultiAttrProp<Tango::DevEnum> multi_prop_edgeout2;
	edgeout2.get_properties(multi_prop_edgeout2);

	multi_prop_edgeout2.enum_labels = {"Rising", "Failing"};
	edgeout2.set_properties(multi_prop_edgeout2);


	Tango::Attribute &edgeout3 = get_device_attr()->get_attr_by_name("edge3");
	Tango::MultiAttrProp<Tango::DevEnum> multi_prop_edgeout3;
	edgeout3.get_properties(multi_prop_edgeout3);

	multi_prop_edgeout3.enum_labels = {"Rising", "Failing"};
	edgeout3.set_properties(multi_prop_edgeout3);*/

	m_is_device_initialized = false;
	set_state(Tango::INIT);
	m_status_message.str("");
	
	INFO_STREAM << "Create the inner-appender in order to manage logs." << endl;  
    yat4tango::InnerAppender::initialize(this, 512);

	try
	{
		//- get the main object used to pilot the lima framework
		//in fact LimaDetector is create the singleton control objet
		//so this call, will only return existing object, no need to give it the ip !!
		m_ct = ControlFactory::instance().get_control("Dhyana");

		//- get interface to specific camera
		m_hw = dynamic_cast<lima::Dhyana::Interface*> (m_ct->hwInterface());

		//- get camera to specific detector
		m_camera = &(m_hw->getCamera());
		
		std::string model;
		m_camera->getDetectorModel(model);
		build_view(model);

		//TODO write attr at init
		
	}
	catch(Exception& e)
	{
		ERROR_STREAM << "Initialization Failed : " << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
	catch(...)
	{
		ERROR_STREAM << "Initialization Failed : UNKNOWN" << endl;
		m_status_message << "Initialization Failed : UNKNOWN" << endl;
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}

	m_is_device_initialized = true;

	write_attr_at_init();
	

	set_state(Tango::STANDBY);
	dev_state();

	/*----- PROTECTED REGION END -----*/	//	Dhyana::init_device
}

//--------------------------------------------------------
/**
 *	Method      : Dhyana::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void Dhyana::get_device_property()
{
	/*----- PROTECTED REGION ID(Dhyana::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	

	/*----- PROTECTED REGION END -----*/	//	Dhyana::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("__ExpertTimerPeriod"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on DhyanaClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		DhyanaClass	*ds_class =
			(static_cast<DhyanaClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize __ExpertTimerPeriod from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  __ExpertTimerPeriod;
		else {
			//	Try to initialize __ExpertTimerPeriod from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  __ExpertTimerPeriod;
		}
		//	And try to extract __ExpertTimerPeriod value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  __ExpertTimerPeriod;

	}

	/*----- PROTECTED REGION ID(Dhyana::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	/*PropertyHelper::create_property_if_empty(this, dev_prop,"15","TemperatureTargetAtInit");	
	PropertyHelper::create_property_if_empty(this, dev_prop,"1","MemorizedFanSpeed");	
	PropertyHelper::create_property_if_empty(this, dev_prop,"LOW","MemorizedGlobalGain");*/	
	PropertyHelper::create_property_if_empty(this, dev_prop,"1","__ExpertTimerPeriod");

	/*----- PROTECTED REGION END -----*/	//	Dhyana::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : Dhyana::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Dhyana::always_executed_hook()
{
	DEBUG_STREAM << "Dhyana::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(Dhyana::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	try
	{
		yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
		m_status_message.str("");
		//- get the singleton control objet used to pilot the lima framework
		m_ct = ControlFactory::instance().get_control("Dhyana");

		//- get interface to specific camera
		m_hw = dynamic_cast<lima::Dhyana::Interface*> (m_ct->hwInterface());

		//- get camera to specific detector
		m_camera = &(m_hw->getCamera());

		//update state
		dev_state();
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
		//- throw exception
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}
	catch(...)
	{
		ERROR_STREAM << "Initialization Failed : UNKNOWN" << endl;
		m_status_message << "Initialization Failed : UNKNOWN" << endl;
		//- throw exception
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	Dhyana::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : Dhyana::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void Dhyana::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Dhyana::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Dhyana::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	//	Add your own code here

	/*----- PROTECTED REGION END -----*/	//	Dhyana::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : Dhyana::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void Dhyana::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Dhyana::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 *	@returns State Code
 */
//--------------------------------------------------------
Tango::DevState Dhyana::dev_state()
{
	DEBUG_STREAM << "Dhyana::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Dhyana::dev_state) ENABLED START -----*/
	
	//	Add your own code
	Tango::DevState argout = DeviceImpl::dev_state();
	DEBUG_STREAM << "Dhyana::dev_state(): entering... !" << endl;

	//    Add your own code to control device here
	stringstream DeviceStatus;
	DeviceStatus << "";
	Tango::DevState DeviceState = Tango::STANDBY;
	if(!m_is_device_initialized)
	{
		DeviceState = Tango::FAULT;
		DeviceStatus << m_status_message.str();
	}
	else
	{
		// state & status are retrieved from Factory, Factory is updated by Generic device
		DeviceState = ControlFactory::instance().get_state();
		DeviceStatus << ControlFactory::instance().get_status();
	}

	set_state(DeviceState);
	set_status(DeviceStatus.str());

	argout = DeviceState;
	return argout;
	/*----- PROTECTED REGION END -----*/	//	Dhyana::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		Tango::DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Method      : Dhyana::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void Dhyana::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(Dhyana::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	Dhyana::add_dynamic_commands
}

/*----- PROTECTED REGION ID(Dhyana::namespace_ending) ENABLED START -----*/

bool Dhyana::is_device_initialized()
{
	return m_is_device_initialized;
}

lima::Dhyana::Camera* Dhyana::get_camera()
{
	return m_camera;
}


void Dhyana::build_view(std::string model)
{
	if (model == "Dhyana 95" || model.find("Dhyana 95 V2.0") != std::string::npos)
	{
		m_attr_view.reset(new AttrViewDhyana95(this));
	}
	else if (model == "Dhyana 6060")
	{
	}

}

void Dhyana::write_attr_at_init()
{
	try
	{
		INFO_STREAM << "Write tango hardware at Init - fanSpeed." << endl;
		Tango::WAttribute &fanSpeed = dev_attr->get_w_attr_by_name("fanSpeed");
		unsigned short speed = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevUShort>(this, "fanSpeed");
		fanSpeed.set_write_value(speed);
		yat4tango::DynamicAttributeWriteCallbackData cbd_fanSpeed;
        cbd_fanSpeed.tga = &fanSpeed;
		cbd_fanSpeed.dya = &m_attr_view->get_dim()->dynamic_attributes_manager().get_attribute("fanSpeed");
        m_attr_view->write_dynamic_attribute_callback(cbd_fanSpeed);

		INFO_STREAM << "Write tango hardware at Init - globalGain." << endl;
		Tango::WAttribute &globalGain = dev_attr->get_w_attr_by_name("globalGain");
		Tango::DevEnum gain = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevEnum>(this, "globalGain");
		globalGain.set_write_value(gain);
		yat4tango::DynamicAttributeWriteCallbackData cbd_globalGain;
        cbd_globalGain.tga = &globalGain;
		cbd_globalGain.dya = &m_attr_view->get_dim()->dynamic_attributes_manager().get_attribute("globalGain");
        m_attr_view->write_dynamic_attribute_callback(cbd_globalGain);
		
		for (int i = 1; i < 4; i++)
        {
            std::string name = "trigOutputKind" + std::to_string(i);
            INFO_STREAM << "\t- Create dynamic attribute [" << name << "]" << std::endl;
			Tango::WAttribute &trigOutputKind = dev_attr->get_w_attr_by_name(name.c_str());
			Tango::DevEnum val = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevEnum>(this, name);
			trigOutputKind.set_write_value(val);
			yat4tango::DynamicAttributeWriteCallbackData cbd_trigOutputKind;
			cbd_trigOutputKind.tga = &trigOutputKind;
			cbd_trigOutputKind.dya = &m_attr_view->get_dim()->dynamic_attributes_manager().get_attribute(name);
			m_attr_view->write_dynamic_trigger_attribute_callback(cbd_trigOutputKind);
		}

		for (int i = 1; i < 4; i++)
        {
            std::string name = "trigOutputWidth" + std::to_string(i);
            INFO_STREAM << "\t- Create dynamic attribute [" << name << "]" << std::endl;
			Tango::WAttribute &trigOutputWidth = dev_attr->get_w_attr_by_name(name.c_str());
			double val = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevDouble>(this, name);
			trigOutputWidth.set_write_value(val);
			yat4tango::DynamicAttributeWriteCallbackData cbd_trigOutputWidth;
			cbd_trigOutputWidth.tga = &trigOutputWidth;
			cbd_trigOutputWidth.dya = &m_attr_view->get_dim()->dynamic_attributes_manager().get_attribute(name);
			m_attr_view->write_dynamic_trigger_attribute_callback(cbd_trigOutputWidth);
		}

		for (int i = 1; i < 4; i++)
        {
            std::string name = "trigOutputDelay" + std::to_string(i);
            INFO_STREAM << "\t- Create dynamic attribute [" << name << "]" << std::endl;
			Tango::WAttribute &trigOutputDelay = dev_attr->get_w_attr_by_name(name.c_str());
			double val = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevDouble>(this, name);
			trigOutputDelay.set_write_value(val);
			yat4tango::DynamicAttributeWriteCallbackData cbd_trigOutputDelay;
			cbd_trigOutputDelay.tga = &trigOutputDelay;
			cbd_trigOutputDelay.dya = &m_attr_view->get_dim()->dynamic_attributes_manager().get_attribute(name);
			m_attr_view->write_dynamic_trigger_attribute_callback(cbd_trigOutputDelay);
		}

		for (int i = 1; i < 4; i++)
        {
            std::string name = "trigOutputEdge" + std::to_string(i);
            INFO_STREAM << "\t- Create dynamic attribute [" << name << "]" << std::endl;
			Tango::WAttribute &trigOutputEdge = dev_attr->get_w_attr_by_name(name.c_str());
			Tango::DevEnum val = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevEnum>(this, name);
			trigOutputEdge.set_write_value(val);
			yat4tango::DynamicAttributeWriteCallbackData cbd_trigOutputEdge;
			cbd_trigOutputEdge.tga = &trigOutputEdge;
			cbd_trigOutputEdge.dya = &m_attr_view->get_dim()->dynamic_attributes_manager().get_attribute(name);
			m_attr_view->write_dynamic_trigger_attribute_callback(cbd_trigOutputEdge);
		}

	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		m_status_message << "Initialization Failed : ";
		for(unsigned i = 0;i < df.errors.length();i++)
		{
			m_status_message << df.errors[i].desc << endl;
		}
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
	catch(Exception& e)
	{
		ERROR_STREAM << "Initialization Failed : " << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
}


//	Additional Methods
//+----------------------------------------------------------------------------
//
// method : 		Dhyana::Dhyana(string &s)
// 
// description : 	constructor for simulated Dhyana
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------


// //--------------------------------------------------------
// /**
//  *	Read attribute tucamVersion related method
//  *	Description: Dhyana Tucam Version.
//  *
//  *	Data type:	Tango::DevString
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_tucamVersion(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_tucamVersion(Tango::Attribute &attr) entering... " << endl;
// 	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
// 	try
// 	{
// 		std::string version;
// 		m_camera->getTucamVersion(version);
// 		strcpy(*attr_tucamVersion_read, version.c_str());
// 		attr.set_value(attr_tucamVersion_read);
// 	}
// 	catch(Tango::DevFailed& df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_tucamVersion");
// 	}
// 	catch(Exception& e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_tucamVersion");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute temperature related method
//  *	Description: Get Temperature of the detector (in Celsius)
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_temperature(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_temperature(Tango::Attribute &attr) entering... " << endl;
// 	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
// 	try
// 	{
// 		double value;
// 		m_camera->getTemperature(value);
// 		*attr_temperature_read = value;
// 		attr.set_value(attr_temperature_read);
// 	}
// 	catch(Tango::DevFailed& df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_temperature");
// 	}
// 	catch(Exception& e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_temperature");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute temperatureTarget related method
//  *	Description: Set the Temperature target of the detector (in Celsius)
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_temperatureTarget(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_temperatureTarget(Tango::Attribute &attr) entering... " << endl;
// 	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
// 	try
// 	{
// 		double value;
// 		m_camera->getTemperatureTarget(value);
// 		*attr_temperatureTarget_read = value;
// 		attr.set_value(attr_temperatureTarget_read);
// 	}
// 	catch(Tango::DevFailed& df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_temperatureTarget");
// 	}
// 	catch(Exception& e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_temperatureTarget");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute temperatureTarget related method
//  *	Description: Set the Temperature target of the detector (in Celsius)
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::write_temperatureTarget(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::write_temperatureTarget(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevDouble	w_val;
// 	attr.get_write_value(w_val);
// 	// the variable w_val will not be used !
// 	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
// 	try
// 	{
// 		attr_temperatureTarget_write = w_val;
// 		m_camera->setTemperatureTarget(attr_temperatureTarget_write);
// 		//yat4tango::PropertyHelper::set_property(this, "MemorizedTemperatureTarget", attr_temperatureTarget_write);
// 	}
// 	catch(Tango::DevFailed& df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::write_temperatureTarget");
// 	}
// 	catch(Exception& e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::write_temperatureTarget");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute fanSpeed related method
//  *	Description: Define the fan speed of the detector [0..5]
//  *
//  *	Data type:	Tango::DevUShort
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_fanSpeed(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_fanSpeed(Tango::Attribute &attr) entering... " << endl;
// 	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
// 	try
// 	{
// 		unsigned value;
// 		m_camera->getFanSpeed(value);
// 		*attr_fanSpeed_read = value;
// 		attr.set_value(attr_fanSpeed_read);
// 	}
// 	catch(Tango::DevFailed& df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_fanSpeed");
// 	}
// 	catch(Exception& e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_fanSpeed");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute fanSpeed related method
//  *	Description: Define the fan speed of the detector [0..5]
//  *
//  *	Data type:	Tango::DevUShort
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::write_fanSpeed(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::write_fanSpeed(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevUShort	w_val;
// 	attr.get_write_value(w_val);
// 	// the variable w_val will not be used !
// 	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
// 	try
// 	{
// 		attr_fanSpeed_write = w_val;
// 		m_camera->setFanSpeed(attr_fanSpeed_write);
// 		yat4tango::PropertyHelper::set_property(this, "MemorizedFanSpeed", attr_fanSpeed_write);
// 	}
// 	catch(Tango::DevFailed& df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::write_fanSpeed");
// 	}
// 	catch(Exception& e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::write_fanSpeed");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute globalGain related method
//  *	Description: Define the gain of the detector [LOW, HIGH, HDR]
//  *
//  *	Data type:	Tango::DevString
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_globalGain(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_globalGain(Tango::Attribute &attr) entering... " << endl;
// 	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
// 	try
// 	{
// 		unsigned nVal;
// 		std::string gain;
// 		m_camera->getGlobalGain(nVal);
// 		if(nVal == 2)
// 			gain = "LOW";
// 		else if(nVal == 1)
// 			gain = "HIGH";
// 		else //(nVal == 0)
// 			gain = "HDR";
// 		strcpy(*attr_globalGain_read, gain.c_str());
// 		attr.set_value(attr_globalGain_read);
// 	}
// 	catch(Tango::DevFailed& df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  std::string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_globalGain");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute globalGain related method
//  *	Description: Define the gain of the detector [LOW, HIGH, HDR]
//  *
//  *	Data type:	Tango::DevString
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::write_globalGain(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::write_globalGain(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevString	w_val;
// 	attr.get_write_value(w_val);
// 	// the variable w_val will not be used !
// 	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
// 	try
// 	{
// 		m_global_gain = *attr_globalGain_read;//memorize previous valid value
// 		attr_globalGain_write = w_val;
// 		std::string current = attr_globalGain_write;
// 		transform(current.begin(), current.end(), current.begin(), ::toupper);
// 		if((current != "LOW") &&
// 		   (current != "HIGH") &&
// 		   (current != "HDR")
// 		   )
// 		{
// 			attr_globalGain_write = const_cast<Tango::DevString> (m_global_gain.c_str());
// 			Tango::Except::throw_exception("CONFIGURATION_ERROR",
// 										   "Possible globalGain values are :"
// 										   "\nHDR"
// 										   "\nHIGH"
// 										   "\nLOW\n",
// 										   "Dhyana::write_globalGain");
// 		}
// 		//- THIS IS AN AVAILABLE globalGain     
// 		m_global_gain = current;
// 		unsigned nVal;
// 		if(m_global_gain == "LOW")
// 			nVal = 2;
// 		else if(m_global_gain == "HIGH")
// 			nVal = 1;
// 		else //(m_global_gain == "HDR")
// 			nVal = 0;
// 		m_camera->setGlobalGain(nVal);
// 		PropertyHelper::set_property(this, "MemorizedGlobalGain", m_global_gain);
// 	}
// 	catch(Tango::DevFailed& df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  std::string(df.errors[0].desc).c_str(),
// 										  "Dhyana::write_globalGain");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute fps related method
//  *	Description: The last computed frame per second (the value is computed every 100 frames only)
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_fps(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_fps(Tango::Attribute &attr) entering... " << endl;
// 	try
// 	{
// 		double fps = 0.0;
// 		m_camera->getFPS(fps);
// 		*attr_fps_read = fps;
// 		attr.set_value(attr_fps_read);
// 	}
//     catch(Tango::DevFailed & df)
//     {
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
//         Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_fps");
//     }
//     catch(Exception & e)
//     {
//         ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_fps");
//     }
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute channel1 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevEnum (channel1Enum)
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_channel1(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_channel1(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value	
// 	try
// 	{
// 		m_signal1 = lima::Dhyana::Camera::TucamSignal::kSignalTrigIn;
// 		m_camera->getOutputSignal(CHANNEL_1, m_signal1, (lima::Dhyana::Camera::TucamSignalEdge&)m_edge_ch1, (int&)m_delay_ch1, (int&)m_width_ch1);
// 		Tango::DevShort* devShortValue;
// 		switch (m_signal1)
// 		{
// 		case lima::Dhyana::Camera::kSignalStart:
// 			devShortValue = (Tango::DevShort *)TriggeroutMode::kEXPOSURESTART;
// 			break;
// 		case lima::Dhyana::Camera::kSignalGlobal:
// 			devShortValue = (Tango::DevShort *)TriggeroutMode::kGLOBAL;
// 			break;
// 		case lima::Dhyana::Camera::kSignalReadEnd:
// 			devShortValue = (Tango::DevShort *)TriggeroutMode::kREADOUT;
// 			break;
// 		}
// 		attr.set_value( (Tango::DevShort*) &devShortValue);
// 	}
//     catch(Tango::DevFailed & df)
//     {
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
//         Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_channel1");
//     }
//     catch(Exception & e)
//     {
//         ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_channel1");
//     }
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute channel1 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevEnum (channel1Enum)
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::write_channel1(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::write_channel1(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	channel1Enum	w_val;
// 	attr.get_write_value(w_val);
// 	try
// 	{
// 		attr_channel1_write = w_val;
// 		switch (attr_channel1_write)
// 		{
// 		case TriggeroutMode::kEXPOSURESTART:
// 			m_signal1 = lima::Dhyana::Camera::TucamSignal::kSignalStart;
// 			break;
// 		case TriggeroutMode::kGLOBAL:
// 			m_signal1 = lima::Dhyana::Camera::TucamSignal::kSignalGlobal;
// 			break;
// 		case TriggeroutMode::kREADOUT:
// 			m_signal1 = lima::Dhyana::Camera::TucamSignal::kSignalReadEnd;
// 			break;
// 		}
// 		m_camera->setOutputSignal(CHANNEL_1, m_signal1, (lima::Dhyana::Camera::TucamSignalEdge)m_edge_ch1, m_delay_ch1, m_width_ch1);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::write_channel1");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::write_channel1");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute channel2 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevEnum (channel2Enum)
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_channel2(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_channel2(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	try
// 	{
// 		m_signal2 = lima::Dhyana::Camera::TucamSignal::kSignalTrigIn;
// 		m_camera->getOutputSignal(CHANNEL_2, m_signal2, (lima::Dhyana::Camera::TucamSignalEdge&)m_edge_ch2, (int&)m_delay_ch2, (int&)m_width_ch2);
// 		Tango::DevShort* devShortValue;
// 		switch (m_signal2)
// 		{
// 		case lima::Dhyana::Camera::kSignalStart:
// 			devShortValue = (Tango::DevShort *)TriggeroutMode::kEXPOSURESTART;
// 			break;
// 		case lima::Dhyana::Camera::kSignalGlobal:
// 			devShortValue = (Tango::DevShort *)TriggeroutMode::kGLOBAL;
// 			break;
// 		case lima::Dhyana::Camera::kSignalReadEnd:
// 			devShortValue = (Tango::DevShort *)TriggeroutMode::kREADOUT;
// 			break;
// 		}
// 		attr.set_value( (Tango::DevShort*) &devShortValue);
// 	}
//     catch(Tango::DevFailed & df)
//     {
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
//         Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_channel2");
//     }
//     catch(Exception & e)
//     {
//         ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_channel2");
//     }
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute channel2 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevEnum (channel2Enum)
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::write_channel2(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::write_channel2(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	channel2Enum	w_val;
// 	attr.get_write_value(w_val);
// 	try
// 	{
// 		attr_channel2_write = w_val;
// 		switch (attr_channel2_write)
// 		{
// 		case TriggeroutMode::kEXPOSURESTART:
// 			m_signal2 = lima::Dhyana::Camera::TucamSignal::kSignalStart;
// 			break;
// 		case TriggeroutMode::kGLOBAL:
// 			m_signal2 = lima::Dhyana::Camera::TucamSignal::kSignalGlobal;
// 			break;
// 		case TriggeroutMode::kREADOUT:
// 			m_signal2 = lima::Dhyana::Camera::TucamSignal::kSignalReadEnd;
// 			break;
// 		}
// 		m_camera->setOutputSignal(CHANNEL_2, m_signal2, (lima::Dhyana::Camera::TucamSignalEdge)m_edge_ch2, m_delay_ch2, m_width_ch2);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::write_channel2");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::write_channel2");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute channel3 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevEnum (channel3Enum)
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_channel3(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_channel3(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	try
// 	{
// 		m_camera->getOutputSignal(CHANNEL_3, m_signal3, (lima::Dhyana::Camera::TucamSignalEdge&)m_edge_ch3, (int&)m_delay_ch3, (int&)m_width_ch3);
// 		Tango::DevShort* devShortValue;
// 		switch (m_signal3)
// 		{
// 		case lima::Dhyana::Camera::kSignalStart:
// 			devShortValue = (Tango::DevShort *)TriggeroutMode::kEXPOSURESTART;
// 			break;
// 		case lima::Dhyana::Camera::kSignalGlobal:
// 			devShortValue = (Tango::DevShort *)TriggeroutMode::kGLOBAL;
// 			break;
// 		case lima::Dhyana::Camera::kSignalReadEnd:
// 			devShortValue = (Tango::DevShort *)TriggeroutMode::kREADOUT;
// 			break;
// 		}
// 		attr.set_value( (Tango::DevShort*) &devShortValue);
// 	}
//     catch(Tango::DevFailed & df)
//     {
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
//         Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_channel3");
//     }
//     catch(Exception & e)
//     {
//         ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_channel3");
//     }
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute channel3 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevEnum (channel3Enum)
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::write_channel3(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::write_channel3(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	channel3Enum	w_val;
// 	attr.get_write_value(w_val);
// 	try
// 	{
// 		attr_channel3_write = w_val;
// 		switch (attr_channel3_write)
// 		{
// 		case TriggeroutMode::kEXPOSURESTART:
// 			m_signal3 = lima::Dhyana::Camera::TucamSignal::kSignalStart;
// 			break;
// 		case TriggeroutMode::kGLOBAL:
// 			m_signal3 = lima::Dhyana::Camera::TucamSignal::kSignalGlobal;
// 			break;
// 		case TriggeroutMode::kREADOUT:
// 			m_signal3 = lima::Dhyana::Camera::TucamSignal::kSignalReadEnd;
// 			break;
// 		}
// 		m_camera->setOutputSignal(CHANNEL_3, m_signal3, (lima::Dhyana::Camera::TucamSignalEdge)m_edge_ch3, m_delay_ch3, m_width_ch3);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::write_channel3");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::write_channel3");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute width1 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_width1(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_width1(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	
// 	try
// 	{
// 		m_camera->getOutputSignal(CHANNEL_1, m_signal1, (lima::Dhyana::Camera::TucamSignalEdge&)m_edge_ch1, (int&)m_delay_ch1, (int&)m_width_ch1);
// 		*attr_width1_read = m_width_ch1;
// 		attr.set_value(attr_width1_read);
// 	}
//     catch(Tango::DevFailed & df)
//     {
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
//         Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_width_ch1");
//     }
//     catch(Exception & e)
//     {
//         ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_width_ch1");
//     }
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute width1 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::write_width1(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::write_width1(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevDouble	w_val;
// 	attr.get_write_value(w_val);
// 	try
// 	{
// 		attr_width1_write = w_val;
// 		m_width_ch1 = (double)attr_width1_write;
// 		m_camera->setOutputSignal(CHANNEL_1, m_signal1, (lima::Dhyana::Camera::TucamSignalEdge)m_edge_ch1, m_delay_ch1, m_width_ch1);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
//         Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::write_width_ch1");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::write_width_ch1");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute width2 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_width2(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_width2(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	try
// 	{
// 		m_camera->getOutputSignal(CHANNEL_2, m_signal2, (lima::Dhyana::Camera::TucamSignalEdge&)m_edge_ch2, (int&)m_delay_ch2, (int&)m_width_ch2);
// 		*attr_width2_read = m_width_ch2;
// 		attr.set_value(attr_width2_read);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_width_ch2");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_width_ch2");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute width2 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::write_width2(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::write_width2(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevDouble	w_val;
// 	attr.get_write_value(w_val);
// 	try
// 	{
// 		attr_width2_write = w_val;
// 		m_width_ch2 = (double)attr_width2_write;
// 		m_camera->setOutputSignal(CHANNEL_2, m_signal2, (lima::Dhyana::Camera::TucamSignalEdge)m_edge_ch2, m_delay_ch2, m_width_ch2);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
//         Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::write_width_ch2");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::write_width_ch2");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute width3 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_width3(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_width3(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	try
// 	{
// 		m_camera->getOutputSignal(CHANNEL_3, m_signal3, (lima::Dhyana::Camera::TucamSignalEdge&)m_edge_ch3, (int&)m_delay_ch3, (int&)m_width_ch3);
// 		*attr_width3_read = m_width_ch3;
// 		attr.set_value(attr_width3_read);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_width_ch3");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_width_ch3");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute width3 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::write_width3(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::write_width3(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevDouble	w_val;
// 	attr.get_write_value(w_val);
// 	try
// 	{
// 		attr_width3_write = w_val;
// 		m_width_ch3 = (double)attr_width3_write;
// 		m_camera->setOutputSignal(CHANNEL_3, m_signal3, (lima::Dhyana::Camera::TucamSignalEdge)m_edge_ch3, m_delay_ch3, m_width_ch3);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
//         Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::write_width_ch3");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::write_width_ch3");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute delay1 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_delay1(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_delay1(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	try
// 	{
// 		m_camera->getOutputSignal(CHANNEL_1, m_signal1, (lima::Dhyana::Camera::TucamSignalEdge&)m_edge_ch1, (int&)m_delay_ch1, (int&)m_width_ch1);
// 		*attr_delay1_read = m_delay_ch1;
// 		attr.set_value(attr_delay1_read);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_delay_ch1");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_delay_ch1");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute delay1 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::write_delay1(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::write_delay1(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevDouble	w_val;
// 	attr.get_write_value(w_val);
// 	try
// 	{
// 		attr_delay1_write = w_val;
// 		m_delay_ch1 = (double)attr_delay1_write;
// 		m_camera->setOutputSignal(CHANNEL_1, m_signal1, (lima::Dhyana::Camera::TucamSignalEdge)m_edge_ch1, m_delay_ch1, m_width_ch1);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::write_delay_ch1");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::write_delay_ch1");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute delay2 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_delay2(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_delay2(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	try
// 	{
// 		m_camera->getOutputSignal(CHANNEL_2, m_signal2, (lima::Dhyana::Camera::TucamSignalEdge&)m_edge_ch2, (int&)m_delay_ch2, (int&)m_width_ch2);
// 		*attr_delay2_read = m_delay_ch2;
// 		attr.set_value(attr_delay2_read);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_delay_ch2");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_delay_ch2");
// 	}
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute delay2 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::write_delay2(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::write_delay2(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevDouble	w_val;
// 	attr.get_write_value(w_val);
// 	try
// 	{
// 		attr_delay2_write = w_val;
// 		m_delay_ch2 = (double)attr_delay2_write;
// 		m_camera->setOutputSignal(CHANNEL_2, m_signal2, (lima::Dhyana::Camera::TucamSignalEdge)m_edge_ch2, m_delay_ch2, m_width_ch2);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::write_delay_ch2");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::write_delay_ch2");
// 	}
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute delay3 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_delay3(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_delay3(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	try
// 	{
// 		m_camera->getOutputSignal(CHANNEL_3, m_signal3, (lima::Dhyana::Camera::TucamSignalEdge&)m_edge_ch3, (int&)m_delay_ch3, (int&)m_width_ch3);
// 		*attr_delay3_read = m_delay_ch3;
// 		attr.set_value(attr_delay3_read);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_delay_ch3");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_delay_ch3");
// 	}
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute delay3 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::write_delay3(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::write_delay3(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevDouble	w_val;
// 	attr.get_write_value(w_val);
// 	try
// 	{
// 		attr_delay3_write = w_val;
// 		m_delay_ch3 = (double)attr_delay3_write;
// 		m_camera->setOutputSignal(CHANNEL_3, m_signal3, (lima::Dhyana::Camera::TucamSignalEdge)m_edge_ch3, m_delay_ch3, m_width_ch3);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::write_delay_ch3");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::write_delay_ch3");
// 	}
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute edge1 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevEnum (edge1Enum)
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_edge1(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_edge1(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	
// 	try
// 	{
// 		m_camera->getOutputSignal(CHANNEL_1, m_signal1, (lima::Dhyana::Camera::TucamSignalEdge&)m_edge_ch1, (int&)m_delay_ch1, (int&)m_width_ch1);
// 		Tango::DevShort *devShortValue;
// 		switch (m_edge_ch1)
// 		{
// 		case lima::Dhyana::Camera::TucamSignalEdge::kSignalEdgeFalling:
// 			devShortValue = (Tango::DevShort *)EdgeMode::kFAILING;
// 			break;
// 		case lima::Dhyana::Camera::TucamSignalEdge::kSignalEdgeRising:
// 			devShortValue = (Tango::DevShort *)EdgeMode::kRISING;
// 			break;
// 		}
// 		attr.set_value( (Tango::DevShort*) &devShortValue );
// 		
// 	}
//     catch(Tango::DevFailed & df)
//     {
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
//         Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_edge1");
//     }
//     catch(Exception & e)
//     {
//         ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_edge1");
//     }
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute edge1 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevEnum (edge1Enum)
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::write_edge1(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::write_edge1(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	edge1Enum	w_val;
// 	attr.get_write_value(w_val);
// 	
// 	try
// 	{
// 		attr_edge1_write = w_val;
// 		switch (attr_edge1_write)
// 		{
// 		case EdgeMode::kFAILING:
// 			m_edge_ch1 = lima::Dhyana::Camera::TucamSignalEdge::kSignalEdgeFalling;
// 			break;
// 		case EdgeMode::kRISING:
// 			m_edge_ch1 = lima::Dhyana::Camera::TucamSignalEdge::kSignalEdgeRising;
// 			break;
// 		}
// 		m_camera->setOutputSignal(CHANNEL_1, m_signal1, (lima::Dhyana::Camera::TucamSignalEdge&)m_edge_ch1, m_delay_ch1, m_width_ch1);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::write_edge1");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::write_edge1");
// 	}
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute edge2 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevEnum (edge2Enum)
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_edge2(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_edge2(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	try
// 	{
// 		m_camera->getOutputSignal(CHANNEL_2, m_signal2, (lima::Dhyana::Camera::TucamSignalEdge&)m_edge_ch2, (int&)m_delay_ch2, (int&)m_width_ch2);
// 		Tango::DevShort *devShortValue;
// 		switch (m_edge_ch2)
// 		{
// 		case lima::Dhyana::Camera::TucamSignalEdge::kSignalEdgeFalling:
// 			devShortValue = (Tango::DevShort *)EdgeMode::kFAILING;
// 			break;
// 		case lima::Dhyana::Camera::TucamSignalEdge::kSignalEdgeRising:
// 			devShortValue = (Tango::DevShort *)EdgeMode::kRISING;
// 			break;
// 		}
// 		attr.set_value( (Tango::DevShort*) &devShortValue );
// 		
// 	}
//     catch(Tango::DevFailed & df)
//     {
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
//         Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_edge2");
//     }
//     catch(Exception & e)
//     {
//         ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_edge2");
//     }
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute edge2 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevEnum (edge2Enum)
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::write_edge2(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::write_edge2(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	edge2Enum	w_val;
// 	attr.get_write_value(w_val);
// 	try
// 	{
// 		attr_edge2_write = w_val;
// 		switch (attr_edge2_write)
// 		{
// 		case EdgeMode::kFAILING:
// 			m_edge_ch2 = lima::Dhyana::Camera::TucamSignalEdge::kSignalEdgeFalling;
// 			break;
// 		case EdgeMode::kRISING:
// 			m_edge_ch2 = lima::Dhyana::Camera::TucamSignalEdge::kSignalEdgeRising;
// 			break;
// 		}
// 		m_camera->setOutputSignal(CHANNEL_2, m_signal2, (lima::Dhyana::Camera::TucamSignalEdge)m_edge_ch2, m_delay_ch2, m_width_ch2);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::write_edge2");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::write_edge2");
// 	}
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute edge3 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevEnum (edge3Enum)
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::read_edge3(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::read_edge3(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	try
// 	{
// 		m_camera->getOutputSignal(CHANNEL_3, m_signal3, (lima::Dhyana::Camera::TucamSignalEdge&)m_edge_ch3, (int&)m_delay_ch3, (int&)m_width_ch3);
// 		Tango::DevShort *devShortValue;
// 		switch (m_edge_ch3)
// 		{
// 		case lima::Dhyana::Camera::TucamSignalEdge::kSignalEdgeFalling:
// 			devShortValue = (Tango::DevShort *)EdgeMode::kFAILING;
// 			break;
// 		case lima::Dhyana::Camera::TucamSignalEdge::kSignalEdgeRising:
// 			devShortValue = (Tango::DevShort *)EdgeMode::kRISING;
// 			break;
// 		}
// 		attr.set_value( (Tango::DevShort*) &devShortValue );
// 		
// 	}
//     catch(Tango::DevFailed & df)
//     {
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
//         Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::read_edge3");
//     }
//     catch(Exception & e)
//     {
//         ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::read_edge3");
//     }
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute edge3 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevEnum (edge3Enum)
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void Dhyana::write_edge3(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "Dhyana::write_edge3(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	edge3Enum	w_val;
// 	attr.get_write_value(w_val);
// 	try
// 	{
// 		attr_edge3_write = w_val;
// 		switch (attr_edge3_write)
// 		{
// 		case EdgeMode::kFAILING:
// 			m_edge_ch3 = lima::Dhyana::Camera::TucamSignalEdge::kSignalEdgeFalling;
// 			break;
// 		case EdgeMode::kRISING:
// 			m_edge_ch3 = lima::Dhyana::Camera::TucamSignalEdge::kSignalEdgeRising;
// 			break;
// 		}
// 		m_camera->setOutputSignal(CHANNEL_3, m_signal3, (lima::Dhyana::Camera::TucamSignalEdge)m_edge_ch3, m_delay_ch3, m_width_ch3);
// 	}
// 	catch (Tango::DevFailed &df)
// 	{
// 		ERROR_STREAM << df << endl;
// 		//- rethrow exception
// 		Tango::Except::re_throw_exception(df,
// 										  "TANGO_DEVICE_ERROR",
// 										  string(df.errors[0].desc).c_str(),
// 										  "Dhyana::write_edge3");
// 	}
// 	catch (Exception &e)
// 	{
// 		ERROR_STREAM << e.getErrMsg() << endl;
// 		//- throw exception
// 		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
// 									   e.getErrMsg().c_str(),
// 									   "Dhyana::write_edge3");
// 	}
// 	
// }


/*----- PROTECTED REGION END -----*/	//	Dhyana::namespace_ending
} //	namespace
